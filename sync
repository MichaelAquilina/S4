#! /usr/bin/env python

import argparse
import os
import json
import logging

import boto3

import s3backup
from s3backup.clients import local, s3


def get_client(target, ignore_files):
    if target.startswith('s3://'):
        tokens = target.replace('s3://', '').split('/')
        bucket = tokens[0]
        prefix = '/'.join(tokens[1:])
        s3_client = boto3.client('s3')
        return s3.S3SyncClient(s3_client, bucket, prefix, ignore_files)
    else:
        return local.LocalSyncClient(target, ignore_files)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--log-level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'])

    args = parser.parse_args()

    logger = logging.getLogger('s3backup')
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(args.log_level)

    config_path = os.path.expanduser('~/.config/s3backup/sync.conf')
    if not os.path.exists(config_path):
        raise ValueError('Expected Config file:', config_path)

    with open(config_path, 'r') as fp:
        config = json.load(fp)

    for entry in config['directories']:
        target_1 = entry['source']
        target_2 = entry['target']
        ignore_files = entry.get('ignore_files')

        client_1 = get_client(target_1, ignore_files)
        client_2 = get_client(target_2, ignore_files)

        logger.info('Syncing %s with %s', target_1, target_2)
        s3backup.sync(client_1, client_2)

if __name__ == '__main__':
    main()
