#! /usr/bin/env python

import argparse
import os
import json
import logging

import boto3

from s3backup import sync
from s3backup.clients import local, s3


CONFIG_FILE_PATH = os.path.expanduser('~/.config/s3backup/sync.conf')


def get_client(target):
    if target.startswith('s3://'):
        s3_uri = s3.parse_s3_uri(target)
        s3_client = boto3.client('s3')
        return s3.S3SyncClient(s3_client, s3_uri.bucket, s3_uri.key)
    else:
        return local.LocalSyncClient(target)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--log-level', default='INFO', choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'])
    parser.add_argument('--conflicts', default=None, choices=['1', '2', 'ignore'])

    args = parser.parse_args()

    if args.log_level == 'DEBUG':
        log_format = '%(levelname)s:%(module)s:%(lineno)s %(message)s'
    else:
        log_format = '%(message)s'

    logging.basicConfig(format=log_format, level=args.log_level)

    # shut boto up
    logging.getLogger('boto3').setLevel(logging.CRITICAL)
    logging.getLogger('botocore').setLevel(logging.CRITICAL)
    logging.getLogger('nose').setLevel(logging.CRITICAL)
    logging.getLogger('s3transfer').setLevel(logging.CRITICAL)

    logger = logging.getLogger(__name__)
    logger.setLevel(args.log_level)

    if not os.path.exists(CONFIG_FILE_PATH):
        raise ValueError('Expected Config file:', CONFIG_FILE_PATH)

    with open(CONFIG_FILE_PATH, 'r') as fp:
        config = json.load(fp)

    try:
        for entry in config['directories']:
            target_1 = entry['source']
            target_2 = entry['target']

            # append trailing slashes to prevent incorrect prefix matching on s3
            if not target_1.endswith('/'):
                target_1 += '/'
            if not target_2.endswith('/'):
                target_2 += '/'

            client_1 = get_client(target_1)
            client_2 = get_client(target_2)

            logger.info('Syncing %s with %s', target_1, target_2)
            sync.sync(client_1, client_2, conflict_choice=args.conflicts)
    except KeyboardInterrupt:
        logger.warning('Quitting due to Keyboard Interrupt...')


if __name__ == '__main__':
    main()
